<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.gd.sakila.mapper.FilmMapper">
	<!-- Map : filmId(in), storeId(in), filmCount(out) / in은 입력, out은 출력 
		vo 생성이 아닌 Map으로 처리-->
	<select id="selectFilmInStock" parameterType="java.util.Map" resultType="int" statementType="CALLABLE">
	<!-- 프로시저 사용할때는 statementType="CALLABLE"를 추가해야한다.  -->
	{
		call film_in_stock(
			#{filmId},
			#{storeId},
			#{filmCount, mode=OUT, jdbcType=DECIMAL, javaType=Integer}
		)
	}	
	</select>
	<insert id="insertActorListByFilm" parameterType="java.util.Map">
		INSERT
			film_actor(
				actor_id, film_id
				)
		INTO
			(#{ck[0]},#{filmId})
	
	</insert>
	<delete id="deleteActorListByFilm" parameterType="int">
		DELETE 
		FROM film_actor
		WHERE film_id=${filmId}
	</delete>
	
	<select id="selectActorListByFilm" parameterType="int" resultType="java.util.Map">
		SELECT 
			a.actor_id actorId,
			CONCAT(a.first_name,' ',a.last_name) name,
			film_id filmId
		FROM actor a 
			LEFT JOIN (	SELECT *
						FROM film_actor
						WHERE film_id=${filmId}) t
			ON a.actor_id=t.actor_id
			ORDER BY filmId DESC, name
	</select>
	
	<select id="selectFilmOne" parameterType="Integer" resultType="java.util.Map">
		SELECT 
			f.film_id filmId,
			f.title title,
			f.description description,
			f.release_year releaseYear,
			l.name name, 
			f.rental_duration rentalDuration,
			f.rental_rate rentalRate, 
			f.length length, 
			f.replacement_cost replacementCost,
			f.rating rating,
			f.special_features specialFeatures,
			f.last_update lastUpdate,
			fl.actors actors,
			fl.category category
		FROM film f 
			LEFT JOIN film_list fl ON f.film_id = fl.FID
			JOIN language l ON f.language_id = l.language_id
		WHERE film_id = #{filmId}
	</select>
	
	<select id="selectFilmList" resultType="java.util.Map" parameterType="java.util.Map">
		SELECT 	FID,
				title,
				category,
				price,
				length,
				rating
		FROM film_list
		<where>
			<if test="categoryName != null">
				AND category = #{categoryName}
			</if>
			<if test="title != null">
				AND title LIKE CONCAT('%',#{title},'%')
			</if>
			<if test="price != null">
				AND price = #{price}
			</if>
			<if test="rating != null">
				AND rating = #{rating}
			</if>
			<if test="actors != null">
				AND actors LIKE CONCAT('%',#{actors},'%')
			</if>
		</where>
			ORDER BY FID ASC
			LIMIT #{beginRow}, #{rowPerPage}
	</select>
	
	<select id="selectTotal" resultType="Integer" parameterType="java.util.Map">
		SELECT COUNT(*) FROM film_list
		<where>
			<if test="categoryName != null">
				AND category = #{categoryName}
			</if>
			<if test="title != null">
				AND title LIKE CONCAT('%',#{title},'%')
			</if>
			<if test="price != null">
				AND price = #{price}
			</if>
			<if test="rating != null">
				AND rating = #{rating}
			</if>
			<if test="actors != null">
				AND actors LIKE CONCAT('%',#{actors},'%')
			</if>
		</where>
	</select>

</mapper>